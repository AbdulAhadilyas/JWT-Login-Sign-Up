"use strict";
exports.__esModule = true;
var bcrypt = require("bcrypt-nodejs");
exports.stringToHash = function (PasswordString, round) {
    if (round === void 0) { round = 10; }
    return new Promise(function (resolve, reject) {
        bcrypt.genSalt(round, function (err, salt) {
            if (err) {
                reject(err);
            }
            bcrypt.hash(PasswordString, salt, function () { }, function (err, hashedPassword) {
                if (err) {
                    reject(err);
                }
                resolve(hashedPassword);
            });
        });
    });
};
exports.varifyHash = function (realPassword, hashString) {
    return new Promise(function (resolve, reject) {
        bcrypt.compare(realPassword, hashString, function (err, result) {
            if (err) {
                resolve(false); //it means hash is invalid
            }
            resolve(result); //return with boolean 'Hash' is matched or not
        });
    });
};
exports.validateHash = function (hashString) {
    return new Promise(function (resolve, reject) {
        bcrypt.compare("dummy", hashString, function (err, result) {
            if (err) {
                resolve(false); //it means Hash is invalid
            }
            resolve(true); //it means hash is either matched or not but it is a valid Hash
        });
    });
};
